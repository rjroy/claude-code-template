# Level 3 Feature Artifact Template
# This template structures feature specifications from Level 3 Implementation Specifics
# Features are decomposed from Level 2 components
# External artifacts (APIs, data models, business logic specs) are referenced, not embedded

artifact_metadata:
  artifact_type: "level-3-feature"
  feature_name: "FeatureName"
  parent_component: "ComponentName"
  source_component_artifact: "path/to/level-2-component-artifact.yml"
  created_date: "YYYY-MM-DD"
  asdd_level: 3
  source_phase: "level-3-specifics"
  version: "1.0"

feature_definition:
  # Core feature identity
  name: "FeatureName"
  description: "Clear description of what this feature does"
  business_value: "Why this feature is needed"
  user_story: "As a [user], I want [goal] so that [benefit]"
  
  # Feature scope and boundaries
  feature_scope:
    included_functionality: ["List of specific capabilities included"]
    excluded_functionality: ["List of what this feature does NOT do"]
    acceptance_criteria: ["Specific criteria for feature completion"]
    
  # Feature classification
  feature_type: "CORE_BUSINESS_LOGIC/USER_INTERFACE/INTEGRATION/DATA_PROCESSING/INFRASTRUCTURE"
  complexity_level: "LOW/MEDIUM/HIGH"
  implementation_priority: "HIGH/MEDIUM/LOW"

# Feature specifications
feature_specifications:
  # API specifications for this feature
  api_specifications:
    - endpoint_group: "Related endpoint group name"
      specification_file: "path/to/feature-api-spec.yml"  # External reference
      endpoints: ["List of endpoint names"]
      description: "What this group of endpoints provides"
      
  # Data model specifications
  data_specifications:
    - data_aspect: "Data entity or relationship"
      data_model_file: "path/to/feature-data-model.yml"  # External reference
      description: "What data this feature manages"
      crud_operations: ["CREATE/READ/UPDATE/DELETE operations supported"]
      
  # Business logic specifications
  business_logic_specifications:
    - logic_component: "Business rule or algorithm name"
      specification_file: "path/to/business-logic-spec.yml"  # External reference
      description: "What business logic this implements"
      inputs: ["Required inputs"]
      outputs: ["Expected outputs"]
      edge_cases: ["Special cases handled"]

# Feature dependencies and integration
dependencies:
  # Dependencies on other features
  feature_dependencies:
    - dependency_feature: "FeatureName"
      dependency_type: "HARD/SOFT"
      relationship: "How this feature depends on the other"
      impact_if_missing: "What happens if dependency is unavailable"
      
  # Dependencies on external systems
  external_dependencies:
    - external_system: "SystemName"
      dependency_type: "API/DATABASE/FILE_SYSTEM/MESSAGE_QUEUE"
      interface_specification: "path/to/external-interface-spec.yml"  # External reference
      description: "What this feature needs from external system"
      fallback_behavior: "What happens if external system is unavailable"
      
  # Dependencies on infrastructure/platform
  infrastructure_dependencies:
    - infrastructure_component: "ComponentName"
      requirement: "What infrastructure capability is needed"
      configuration: "How infrastructure should be configured"

# Feature workflows and processes
workflows:
  # User-facing workflows
  user_workflows:
    - workflow_name: "WorkflowName"
      workflow_specification: "path/to/workflow-spec.yml"  # External reference
      description: "What user workflow this feature supports"
      steps: ["High-level workflow steps"]
      error_handling: ["How errors are handled in workflow"]
      
  # System workflows
  system_workflows:
    - workflow_name: "SystemWorkflowName"
      description: "What system process this feature supports"
      trigger: "What initiates this workflow"
      steps: ["High-level system workflow steps"]
      completion_criteria: "How to know workflow is complete"

# Feature validation and testing
validation_requirements:
  # Functional validation
  functional_validation:
    - validation_aspect: "What functionality to validate"
      validation_method: "How to validate this works"
      test_scenarios: ["Specific test scenarios"]
      success_criteria: "What indicates successful validation"
      
  # Integration validation
  integration_validation:
    - integration_point: "What integration to validate"
      validation_approach: "How to validate integration works"
      test_data_requirements: "What test data is needed"
      
  # Performance validation
  performance_validation:
    - performance_aspect: "What performance to validate"
      measurement_method: "How to measure performance"
      performance_targets: "Specific performance requirements"
      load_testing_requirements: "What load testing is needed"
      
  # Security validation
  security_validation:
    - security_aspect: "What security to validate"
      validation_approach: "How to validate security"
      threat_scenarios: ["Security threats to test against"]
      
  # Git-hook testing strategy
  git_hook_testing_strategy:
    # Pre-commit hooks (fast, focused validation)
    pre_commit_hooks:
      - hook_name: "HookName (e.g., lint-check, format-check)"
        scope: "changed_files/affected_files/all_files"
        languages: ["ProjectSpecificLanguages"]
        failure_mode: "block_commit/warn/skip"
        bypass_allowed: true  # Whether developers can bypass with --no-verify
        estimated_duration: "< N seconds/minutes"
        rationale: "Why this hook is needed at commit time"
        
    # Pre-push hooks (moderate duration, broader validation)
    pre_push_hooks:
      - hook_name: "HookName (e.g., unit-tests, security-scan)"
        scope: "affected_features/changed_components/full_suite"
        test_selection: "smart_selection/all_tests/critical_path"
        failure_mode: "block_push/warn/conditional"
        max_duration: "N minutes maximum"
        fallback_behavior: "What happens if hook fails/times out"
        rationale: "Why this validation is needed before push"
        
    # CI/CD hooks (comprehensive validation)
    ci_cd_hooks:
      - hook_name: "HookName (e.g., integration-tests, deployment-gate)"
        trigger: "pull_request/merge/release/scheduled"
        required_coverage: "N% code coverage requirement"
        performance_gates: ["Specific performance requirements"]
        security_scans: ["Types of security validation"]
        quality_gates: ["Code quality requirements"]
        deployment_gates: ["What must pass before deployment"]
        rationale: "Why this comprehensive validation is needed"
        
    # Hook management strategy
    hook_management:
      hook_installation: "How team installs/updates hooks"
      hook_versioning: "How hook configurations are versioned"
      team_onboarding: "How new team members get hooks set up"
      troubleshooting: "Common hook issues and solutions"
      rollback_strategy: "How to disable hooks if they cause problems"
      
    # Testing philosophy for this feature
    testing_philosophy:
      automation_level: "FULL/SELECTIVE/MINIMAL automation"
      domain_complexity: "SIMPLE/COMPLEX/EXTREME domain assessment"
      team_capability: "Team's testing automation experience level"
      risk_tolerance: "How much risk acceptable vs testing overhead"
      feedback_speed: "Prioritization of fast feedback vs comprehensive testing"

# Feature implementation requirements
implementation_requirements:
  # Technology requirements
  technology_requirements:
    - technology: "Specific technology/framework/library"
      usage: "How this technology is used"
      version_requirements: "Version constraints"
      rationale: "Why this technology is needed"
      
  # Performance requirements
  performance_requirements:
    - performance_metric: "Response time/throughput/etc"
      target_value: "Specific performance target"
      measurement_conditions: "Under what conditions to measure"
      
  # Security requirements
  security_requirements:
    - security_requirement: "Specific security need"
      implementation_approach: "How to implement this security"
      validation_method: "How to validate security is working"
      
  # Monitoring requirements
  monitoring_requirements:
    - monitoring_aspect: "What to monitor"
      metrics: ["Specific metrics to track"]
      alerts: ["What conditions should trigger alerts"]
      logging: ["What events to log"]

# Feature risk assessment
risk_assessment:
  # Implementation risks
  implementation_risks:
    - risk_id: "R-FEAT-001"
      risk_description: "What could go wrong during implementation"
      probability: "HIGH/MEDIUM/LOW"
      impact: "HIGH/MEDIUM/LOW"
      mitigation_strategy: "How to prevent/respond"
      
  # Integration risks
  integration_risks:
    - risk_id: "R-INT-001"
      risk_description: "Integration failure scenario"
      affected_features: ["List of features affected"]
      mitigation_strategy: "How to handle integration failure"
      
  # Business risks
  business_risks:
    - risk_id: "R-BIZ-001"
      risk_description: "Business risk if feature fails"
      business_impact: "Effect on business operations"
      mitigation_strategy: "How to minimize business impact"

# Traceability and alignment
traceability:
  parent_component: "ComponentName from Level 2"
  level_2_artifact: "path/to/level-2-component-artifact.yml"
  level_1_approach: "Which Level 1 approach this feature supports"
  level_0_vision: "How this feature contributes to Level 0 vision"
  business_requirements: ["Business requirements this feature addresses"]

# References to external artifacts
external_artifacts:
  # API specifications
  api_specifications:
    - artifact_name: "Feature API Specification"
      file_path: "path/to/feature-api-spec.yml"
      format: "OpenAPI/GraphQL/Proto/etc"
      description: "API specification for this feature"
      
  # Data models
  data_models:
    - artifact_name: "Feature Data Model"
      file_path: "path/to/feature-data-model.yml"
      format: "JSON_Schema/Proto/SQL/etc"
      description: "Data model for this feature"
      
  # Business logic specifications
  business_logic_specs:
    - artifact_name: "Business Logic Specification"
      file_path: "path/to/business-logic-spec.yml"
      format: "YAML/JSON/etc"
      description: "Business logic specification for this feature"
      
  # Workflow specifications
  workflow_specs:
    - artifact_name: "Workflow Specification"
      file_path: "path/to/workflow-spec.yml"
      format: "BPMN/YAML/JSON/etc"
      description: "Workflow specification for this feature"

# Feature completion and validation
completion_criteria:
  # Feature completion requirements
  completion_requirements:
    - requirement: "What must be completed"
      validation_method: "How to validate completion"
      acceptance_criteria: "What indicates acceptance"
      
  # Quality gates
  quality_gates:
    - gate_name: "Quality gate name"
      criteria: "What criteria must be met"
      validation_approach: "How to validate criteria"
      
  # Ready for Level 4 implementation
  implementation_readiness:
    ready_for_level_4: true  # true when feature can be implemented
    readiness_criteria: ["What criteria indicate readiness"]
    
    # Suggested implementation approach
    implementation_approach:
      - implementation_phase: "Phase name"
        rationale: "Why this should be implemented in this phase"
        complexity_estimate: "LOW/MEDIUM/HIGH"
        dependencies: ["What must be completed first"]
        
    # Blocking issues for Level 4
    blocking_issues:
      - issue: "What blocks implementation"
        impact: "How this blocks Level 4 implementation"
        resolution_approach: "How to resolve this issue"